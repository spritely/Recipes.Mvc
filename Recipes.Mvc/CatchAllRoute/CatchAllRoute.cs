// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CatchAllRoute.cs">
//   Copyright (c) 2015. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Mvc
{
    using System;
    using System.Web;
    using System.Web.Mvc;
    using System.Web.Routing;

#if !RecipesMvcProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes.Mvc", "See package version number")]
#endif
    internal class CatchAllRoute : RouteBase
    {
        private readonly string action;
        private readonly string controller;

        public CatchAllRoute(string controller, string action)
        {
            if (controller == null)
            {
                throw new ArgumentNullException("controller");
            }

            if (string.IsNullOrWhiteSpace(controller))
            {
                throw new ArgumentException("Argument cannot be an empty string.", "controller");
            }

            if (action == null)
            {
                throw new ArgumentNullException("action");
            }

            if (string.IsNullOrWhiteSpace(action))
            {
                throw new ArgumentException("Argument cannot be an empty string.", "action");
            }

            this.controller = controller;
            this.action = action;
        }

        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            var result = new RouteData(this, new MvcRouteHandler());
            result.Values.Add("controller", this.controller);
            result.Values.Add("action", this.action);

            return result;
        }

        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
        {
            throw new NotImplementedException();
        }
    }
}
